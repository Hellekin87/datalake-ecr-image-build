# This is a basic workflow to help you get started with Actions

name: datalake ecr build and push
env:
  ecr-repo: "user-maiksawesomerepo"
  runs-on-os: "ubuntu-latest"

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-on-datalake"
  build-on-datalake:
    # The type of runner that the job will run on
    runs-on:  ${{ env.runs-on-os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Fetch Datalake credentials
        id: datalake-creds
        uses: ./.github/actions/datalake-credentials
        with:
          username: ${{ secrets.DATALAKE_USERNAME }}
          password: ${{ secrets.DATALAKE_PASSWORD }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.datalake-creds.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.datalake-creds.outputs.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ steps.datalake-creds.outputs.AWS_SESSION_TOKEN }} 
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDDHHmmss
          
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr-repo }}
          IMAGE_TAG: ${{ steps.current-time.outputs.formattedTime }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
